name: E2E Test With Rate Limit

on:
  push:
    branches: [main, release-*]
    paths-ignore: ["**.md", "**.png", "**.jpg", "**.svg", "**/docs/**"]
  pull_request:
    branches: [main, release-*]
    paths-ignore: ["**.md", "**.png", "**.jpg", "**.svg", "**/docs/**"]
  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: read

env:
  KIND_VERSION: v0.12.0
  CONTAINERD_VERSION: v1.5.2
  KIND_CONFIG_PATH: test/testdata/kind/config.yaml
  DRAGONFLY_CHARTS_PATH: deploy/helm-charts/charts/dragonfly
  DRAGONFLY_FILE_SERVER_PATH: test/testdata/k8s/dufs.yaml

jobs:
  e2e_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        module:
          - "normal"
        include:
          - module: normal
            charts-config: test/testdata/charts/config-rate-limit.yaml
            focus: "Rate Limit"

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version-file: go.mod

      - name: Get dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.22.1
          mkdir -p /tmp/artifact

      - name: Setup buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
        id: buildx
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Pull Rust Client Image
        run: |
          cd client-rs
          CLIENT_TAG=$(git describe --tags $(git rev-parse HEAD))
          docker pull dragonflyoss/client:$CLIENT_TAG
          docker tag dragonflyoss/client:$CLIENT_TAG dragonflyoss/client:latest
          docker pull dragonflyoss/dfinit:$CLIENT_TAG
          docker tag dragonflyoss/dfinit:$CLIENT_TAG dragonflyoss/dfinit:latest

      - name: Build Scheduler Image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: build/images/scheduler/Dockerfile
          push: false
          load: true
          tags: dragonflyoss/scheduler:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build Manager Image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: build/images/manager/Dockerfile
          push: false
          load: true
          tags: dragonflyoss/manager:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3
        with:
          version: ${{ env.KIND_VERSION }}
          config: ${{ env.KIND_CONFIG_PATH }}
          cluster_name: kind

      - name: Kind load images
        run: |
          kind load docker-image dragonflyoss/manager:latest
          kind load docker-image dragonflyoss/scheduler:latest
          kind load docker-image dragonflyoss/client:latest
          kind load docker-image dragonflyoss/dfinit:latest

      - name: Setup dragonfly
        run: |
          helm install --wait --timeout 15m --dependency-update --create-namespace --namespace dragonfly-system -f ${{ matrix.charts-config }} dragonfly ${{ env.DRAGONFLY_CHARTS_PATH }}
          mkdir -p /tmp/artifact/dufs && chmod 777 /tmp/artifact/dufs
          kubectl apply -f ${{ env.DRAGONFLY_FILE_SERVER_PATH }}
          kubectl wait po dufs-0 --namespace dragonfly-e2e --for=condition=ready --timeout=10m

      - name: Run E2E test
        run: |
          ginkgo -v -r --race --fail-fast --cover --trace --show-node-events --focus=${{ matrix.focus }} test/e2e
          cat coverprofile.out >> coverage.txt

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt
          flags: e2etests

      - name: Upload Logs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: ${{ matrix.module }}-e2e-tests-logs
          path: |
            /tmp/artifact/**
