// Code generated by MockGen. DO NOT EDIT.
// Source: image.go
//
// Generated by this command:
//
//	mockgen -destination mocks/job_mock.go -source image.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	job "d7y.io/dragonfly/v2/internal/job"
	gomock "go.uber.org/mock/gomock"
)

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
	isgomock struct{}
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// CreatePreheatRequestsByManifestURL mocks base method.
func (m *MockImage) CreatePreheatRequestsByManifestURL(ctx context.Context, req *job.ManifestRequest) ([]*job.PreheatRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreheatRequestsByManifestURL", ctx, req)
	ret0, _ := ret[0].([]*job.PreheatRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreheatRequestsByManifestURL indicates an expected call of CreatePreheatRequestsByManifestURL.
func (mr *MockImageMockRecorder) CreatePreheatRequestsByManifestURL(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreheatRequestsByManifestURL", reflect.TypeOf((*MockImage)(nil).CreatePreheatRequestsByManifestURL), ctx, req)
}
